/**
 * Auth Manager - Sistema de Autentica√ß√£o e Controle de M√≥dulos
 * Inclua este script em todas as p√°ginas do sistema para:
 * 1. Verificar autentica√ß√£o
 * 2. Verificar acesso ao m√≥dulo atual
 * 3. Redirecionar para login se necess√°rio
 */

const AuthManager = (function() {
   'use strict';

   // Chaves usadas no localStorage
   const KEYS = {
      USER_DATA: 'userData',     // Dados do usu√°rio
      MODULES: 'userModules',    // Lista de m√≥dulos permitidos
      TOKEN_DATA: 'tokenData',   // Dados do token (data de login, expira√ß√£o)
      LAST_USER_EMAIL: 'lastUserEmail', // Email do √∫ltimo usu√°rio
      LAST_USER_NAME: 'lastUserName'    // Nome do √∫ltimo usu√°rio
   };

   /**
    * Salva os dados de autentica√ß√£o ap√≥s login bem-sucedido
    * @param {Object} data Resposta do servidor ap√≥s login
    */
   function saveAuthData(data) {
      if (!data) return false;

      try {
         // Estrutura esperada: { user: {...}, modules: [...] } ou { data: { user: {...} } }
         let userData = null;
         let userModules = [];

         // Verifica se os dados est√£o na estrutura antiga ou nova
         if (data.data && data.data.user) {
            // Nova estrutura: { data: { user: {...} } }
            userData = data.data.user;

            // Extrai os m√≥dulos da nova estrutura
            if (userData.modules && Array.isArray(userData.modules)) {
               userModules = userData.modules.map(m => m.name);
            }
         } else if (data.user) {
            // Estrutura antiga: { user: {...}, modules: [...] }
            userData = data.user;

            // Usa os m√≥dulos da estrutura antiga
            if (data.modules && Array.isArray(data.modules)) {
               userModules = data.modules;
            }
         }

         // Salva dados do usu√°rio
         if (userData) {
            localStorage.setItem(KEYS.USER_DATA, JSON.stringify(userData));
         } else {
            console.error('‚ùå Estrutura de dados de usu√°rio inv√°lida');
            return false;
         }

         // Salva lista de m√≥dulos
         localStorage.setItem(KEYS.MODULES, JSON.stringify(userModules));

         // Salva informa√ß√µes do token (data de login, expira√ß√£o)
         localStorage.setItem(KEYS.TOKEN_DATA, JSON.stringify({
            loginTime: Date.now(),
            // 24 horas de expira√ß√£o por padr√£o
            expiresAt: Date.now() + (24 * 60 * 60 * 1000)
         }));

         return true;
      } catch (error) {
         console.error('‚ùå Erro ao salvar dados de autentica√ß√£o:', error);
         return false;
      }
   }

   /**
    * Verifica com o servidor se o token ainda √© v√°lido
    * @returns {Promise<boolean>} Verdadeiro se o token for v√°lido
    */
   async function verifySessionWithServer() {
      try {
         // Usa a fun√ß√£o Thefetch global para verificar a sess√£o
         if (typeof Thefetch !== 'function') {
            console.error('‚ùå Fun√ß√£o Thefetch n√£o encontrada');
            return false;
         }

         const response = await Thefetch('/api/auth/session', 'GET');

         // Se a resposta for bem-sucedida, a sess√£o √© v√°lida
         if (response && response.success === true) {
            // Atualiza os dados do usu√°rio se dispon√≠veis na resposta
            if (response.data && response.data.user) {
               saveAuthData(response);
            }

            return true;
         }

         // Se recebemos c√≥digo SESSION_INVALID, a sess√£o expirou
         if (response && response.code === 'SESSION_INVALID') {
            console.log('‚ùå Sess√£o expirada no servidor');
            return false;
         }

         console.log('‚ùå Erro na verifica√ß√£o da sess√£o:', response?.message || 'Resposta inv√°lida');
         return false;
      } catch (error) {
         console.error('‚ùå Erro ao verificar sess√£o com o servidor:', error);
         return false;
      }
   }

   /**
    * Verifica se o usu√°rio est√° autenticado (token v√°lido)
    * @returns {Promise<boolean>} Verdadeiro se autenticado
    */
   async function isAuthenticated() {
      try {
         // 1. Verifica se existem dados do usu√°rio no localStorage
         const userData = localStorage.getItem(KEYS.USER_DATA);
         if (!userData) {
            console.log('‚ùå Dados do usu√°rio n√£o encontrados no localStorage');
            return false;
         }

         // 2. Verifica se o token expirou localmente
         const tokenData = JSON.parse(localStorage.getItem(KEYS.TOKEN_DATA) || '{}');
         if (!tokenData.expiresAt) {
            console.log('‚ùå Dados do token n√£o encontrados no localStorage');
            return false;
         }

         // 3. Verifica expira√ß√£o local
         if (Date.now() > tokenData.expiresAt) {
            console.log('‚ùå Token expirado localmente');
            return false;
         }

         // 4. Verifica com o servidor se a sess√£o ainda √© v√°lida
         const isValid = await verifySessionWithServer();
         if (!isValid) {
            console.log('‚ùå Sess√£o invalidada pelo servidor');
            // Limpa dados locais j√° que o token √© inv√°lido
            logout(false); // N√£o redireciona automaticamente
            return false;
         }

         return true;
      } catch (error) {
         console.error('‚ùå Erro ao verificar autentica√ß√£o:', error);
         return false;
      }
   }

   /**
    * Retorna dados do usu√°rio logado
    * @returns {Object|null} Dados do usu√°rio ou null
    */
   function getUserData() {
      try {
         const userData = localStorage.getItem(KEYS.USER_DATA);
         return userData ? JSON.parse(userData) : null;
      } catch (error) {
         console.error('‚ùå Erro ao recuperar dados do usu√°rio:', error);
         return null;
      }
   }

   /**
    * Retorna lista de m√≥dulos que o usu√°rio tem acesso
    * @returns {Array} Lista de m√≥dulos
    */
   function getUserModules() {
      try {
         const modules = localStorage.getItem(KEYS.MODULES);
         return modules ? JSON.parse(modules) : [];
      } catch (error) {
         console.error('‚ùå Erro ao recuperar m√≥dulos do usu√°rio:', error);
         return [];
      }
   }

   /**
    * Faz logout do usu√°rio
    * @param {boolean} redirect - Se deve redirecionar para a p√°gina de login
    */
   function logout(redirect = true) {
      // Salva o email e nome do √∫ltimo usu√°rio antes de limpar
      const userData = getUserData();
      if (userData) {
         localStorage.setItem(KEYS.LAST_USER_EMAIL, userData.email || '');
         localStorage.setItem(KEYS.LAST_USER_NAME, userData.name || '');
      }

      // Limpa dados do localStorage
      localStorage.removeItem(KEYS.USER_DATA);
      localStorage.removeItem(KEYS.MODULES);
      localStorage.removeItem(KEYS.TOKEN_DATA);

      // Limpa outros dados que possam existir
      localStorage.removeItem('isAuthenticated');
      localStorage.removeItem('userEmail');
      localStorage.removeItem('loginTime');

      // Limpa cookie do backend
      document.cookie = 'accessToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';

      // Redireciona para login se solicitado
      if (redirect) {
         window.location.href = '/login';
      }
   }

   /**
    * Verifica se pode acessar a p√°gina atual baseado no m√≥dulo
    * Se n√£o estiver autenticado ou n√£o tiver permiss√£o, redireciona
    * @returns {Promise<boolean>} Verdadeiro se tem acesso
    */
   async function checkAccess() {
      // Se estiver na p√°gina de login, n√£o verifica
      if (window.location.pathname === '/login' ||
         window.location.pathname.includes('/login/')) {
         return true;
      }

      // 1. Verifica autentica√ß√£o com o servidor
      const authenticated = await isAuthenticated();
      if (!authenticated) {
         redirectToLogin();
         return false;
      }

      return true;
   }

   /**
    * Redireciona para a p√°gina de login
    */
   function redirectToLogin() {
      window.location.href = '/login';
   }

   /**
    * Cria elementos HTML para mostrar informa√ß√µes do usu√°rio
    * (exemplo: nome do usu√°rio no cabe√ßalho, etc)
    */
   function renderUserInfo() {
      const userData = getUserData();
      const lastEmail = localStorage.getItem(KEYS.LAST_USER_EMAIL);
      const lastName = localStorage.getItem(KEYS.LAST_USER_NAME);

      // Preenche com dados do usu√°rio logado ou √∫ltimo usu√°rio
      if (userData || lastEmail || lastName) {
         // Procura elementos com data-auth-user-* para preencher com dados
         document.querySelectorAll('[data-auth-user]').forEach(element => {
            const field = element.getAttribute('data-auth-user');
            if (userData && userData[field]) {
               element.textContent = userData[field];
            }
         });

         // Preenche o campo de email se existir
         const emailInput = document.getElementById('signin-email');
         if (emailInput) {
            emailInput.value = userData ? userData.email : lastEmail || '';
         }

         // Preenche a mensagem de boas-vindas se existir
         const loginMessage = document.getElementById('login-message');
         if (loginMessage) {
            const name = userData ? userData.name : lastName;
            if (name) {
               loginMessage.textContent = 'Bem-vindo de volta, ' + name + '!';
            }
         }
      }
   }

   /**
    * Renderiza o menu de acordo com as permiss√µes do usu√°rio
    */
   function renderModuleMenu() {
      const modules = getUserModules();
      const menuContainer = document.getElementById('moduleMenu');

      // Se n√£o tiver o container de menu ou m√≥dulos, n√£o faz nada
      if (!menuContainer || !modules || !modules.length) return;

      // Mapa de m√≥dulos e suas informa√ß√µes
      const moduleMap = {
         'home': { icon: 'üè†', label: 'In√≠cio', url: '/pages/home/' },
         'users': { icon: 'üë•', label: 'Usu√°rios', url: '/pages/users/' },
         'products': { icon: 'üì¶', label: 'Produtos', url: '/pages/products/' },
         'reports': { icon: 'üìä', label: 'Relat√≥rios', url: '/pages/reports/' },
         'settings': { icon: '‚öôÔ∏è', label: 'Configura√ß√µes', url: '/pages/settings/' }
         // Adicione mais m√≥dulos conforme necess√°rio
      };

      // Limpa o container
      menuContainer.innerHTML = '';

      // Admin tem acesso a tudo
      const isAdmin = modules.includes('admin') || modules.includes('*');

      // Cria itens de menu para cada m√≥dulo permitido
      Object.keys(moduleMap).forEach(moduleId => {
         // Se n√£o tem permiss√£o para este m√≥dulo, pula
         if (!isAdmin && !modules.includes(moduleId)) return;

         const module = moduleMap[moduleId];

         // Cria elemento de menu
         const menuItem = document.createElement('a');
         menuItem.href = module.url;
         menuItem.className = 'module-menu-item';
         menuItem.innerHTML = `
            <span class="module-icon">${module.icon}</span>
            <span class="module-label">${module.label}</span>
         `;

         // Adiciona ao menu
         menuContainer.appendChild(menuItem);
      });
   }

   // Inicializa verifica√ß√µes quando o script √© carregado
   if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', async function() {
         // Verifica acesso (sem especificar m√≥dulo)
         await checkAccess();
         // Renderiza informa√ß√µes do usu√°rio
         renderUserInfo();
         // Renderiza menu de m√≥dulos
         renderModuleMenu();
      });
   } else {
      // Se o DOM j√° carregou
      (async function() {
         await checkAccess();
         renderUserInfo();
         renderModuleMenu();
      })();
   }

   // Exp√µe API p√∫blica
   return {
      saveAuthData: saveAuthData,
      isAuthenticated: isAuthenticated,
      getUserData: getUserData,
      getUserModules: getUserModules,
      checkAccess: checkAccess,
      logout: logout,
      renderUserInfo: renderUserInfo,
      renderModuleMenu: renderModuleMenu
   };

})();
