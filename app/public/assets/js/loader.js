// Função para injetar o loader SVG no final do body
function injectLoaderSVG() {
   const loaderDiv = document.createElement('div');
   loaderDiv.id = 'loader';
   loaderDiv.innerHTML = `<?xml version="1.0" encoding="utf-8"?>
         <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: none; display: block; shape-rendering: auto;" width="80px" height="80px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
         <g transform="rotate(0 50 50)">
         <rect x="47.5" y="21" rx="2.5" ry="6" width="5" height="12" fill="var(--primary-color)">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5555555555555556s" begin="-0.5128205128205128s" repeatCount="indefinite"></animate>
         </rect>
         </g><g transform="rotate(27.692307692307693 50 50)">
         <rect x="47.5" y="21" rx="2.5" ry="6" width="5" height="12" fill="var(--primary-color)">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5555555555555556s" begin="-0.47008547008547s" repeatCount="indefinite"></animate>
         </rect>
         </g><g transform="rotate(55.38461538461539 50 50)">
         <rect x="47.5" y="21" rx="2.5" ry="6" width="5" height="12" fill="var(--primary-color)">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5555555555555556s" begin="-0.42735042735042733s" repeatCount="indefinite"></animate>
         </rect>
         </g><g transform="rotate(83.07692307692308 50 50)">
         <rect x="47.5" y="21" rx="2.5" ry="6" width="5" height="12" fill="var(--primary-color)">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5555555555555556s" begin="-0.3846153846153846s" repeatCount="indefinite"></animate>
         </rect>
         </g><g transform="rotate(110.76923076923077 50 50)">
         <rect x="47.5" y="21" rx="2.5" ry="6" width="5" height="12" fill="var(--primary-color)">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5555555555555556s" begin="-0.34188034188034183s" repeatCount="indefinite"></animate>
         </rect>
         </g><g transform="rotate(138.46153846153845 50 50)">
         <rect x="47.5" y="21" rx="2.5" ry="6" width="5" height="12" fill="var(--primary-color)">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5555555555555556s" begin="-0.29914529914529914s" repeatCount="indefinite"></animate>
         </rect>
         </g><g transform="rotate(166.15384615384616 50 50)">
         <rect x="47.5" y="21" rx="2.5" ry="6" width="5" height="12" fill="var(--primary-color)">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5555555555555556s" begin="-0.2564102564102564s" repeatCount="indefinite"></animate>
         </rect>
         </g><g transform="rotate(193.84615384615384 50 50)">
         <rect x="47.5" y="21" rx="2.5" ry="6" width="5" height="12" fill="var(--primary-color)">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5555555555555556s" begin="-0.21367521367521367s" repeatCount="indefinite"></animate>
         </rect>
         </g><g transform="rotate(221.53846153846155 50 50)">
         <rect x="47.5" y="21" rx="2.5" ry="6" width="5" height="12" fill="var(--primary-color)">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5555555555555556s" begin="-0.17094017094017092s" repeatCount="indefinite"></animate>
         </rect>
         </g><g transform="rotate(249.23076923076923 50 50)">
         <rect x="47.5" y="21" rx="2.5" ry="6" width="5" height="12" fill="var(--primary-color)">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5555555555555556s" begin="-0.1282051282051282s" repeatCount="indefinite"></animate>
         </rect>
         </g><g transform="rotate(276.9230769230769 50 50)">
         <rect x="47.5" y="21" rx="2.5" ry="6" width="5" height="12" fill="var(--primary-color)">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5555555555555556s" begin="-0.08547008547008546s" repeatCount="indefinite"></animate>
         </rect>
         </g><g transform="rotate(304.61538461538464 50 50)">
         <rect x="47.5" y="21" rx="2.5" ry="6" width="5" height="12" fill="var(--primary-color)">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5555555555555556s" begin="-0.04273504273504273s" repeatCount="indefinite"></animate>
         </rect>
         </g><g transform="rotate(332.3076923076923 50 50)">
         <rect x="47.5" y="21" rx="2.5" ry="6" width="5" height="12" fill="var(--primary-color)">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="0.5555555555555556s" begin="0s" repeatCount="indefinite"></animate>
         </rect>
         </g>
         <!-- [ldio] generated by https://loading.io/ -->
         </svg>`;
   document.body.appendChild(loaderDiv);
}

// Adiciona o loader antes da página carregar
injectLoaderSVG();

// Variável global para controlar o estado do loader
window.loaderState = {
   authChecked: false,
   pageLoaded: false,
   requestsCompleted: false
};

// Inicializa a personalização e verificação de autenticação
(async function initApp() {
   try {
      // Verifica se está na página de login para forçar atualização
      const isLoginPage = window.location.pathname.includes('/login') ||
                         window.location.pathname === '/login' ||
                         window.location.pathname === '/';

      // Se o sistema de personalização não estiver disponível, marca como concluído
      if (typeof CompanyBranding === 'undefined') {
         console.warn('⚠️ Sistema de personalização não encontrado');
         window.loaderState.pageLoaded = true;
      } else {
         // Se estiver na página de login, força a atualização
         let companyData;
         if (isLoginPage) {
            companyData = await CompanyBranding.forceRefresh();
         } else {
            // Para outras páginas, usa o cache se disponível
            companyData = await CompanyBranding.init();
         }

         window.loaderState.pageLoaded = true;
      }

      // Verifica autenticação apenas se não estiver na página de login
      if (!isLoginPage && typeof AuthManager !== 'undefined') {
         try {
            // Verifica autenticação
            const isAuthenticated = await AuthManager.isAuthenticated();

            // Marca a autenticação como verificada
            window.loaderState.authChecked = true;

            // Se não estiver autenticado, o AuthManager já vai redirecionar
            // então não precisamos fazer nada aqui
         } catch (error) {
            console.error('❌ Erro ao verificar autenticação:', error);
            window.loaderState.authChecked = true; // Marca como verificado mesmo com erro
         }
      } else {
         // Se estiver na página de login ou não tiver AuthManager, marca como verificado
         window.loaderState.authChecked = true;
      }

      // Após 1 segundo, considera que todas as requisições foram completadas
      setTimeout(() => {
         window.loaderState.requestsCompleted = true;
         checkAndHideLoader();
      }, 500);
   } catch (error) {
      console.error('❌ Erro ao inicializar aplicação:', error);

      // Em caso de erro, marca tudo como concluído para não travar o loader
      window.loaderState.authChecked = true;
      window.loaderState.pageLoaded = true;
      window.loaderState.requestsCompleted = true;

      checkAndHideLoader();
   }
})();

/**
 * Verifica se todas as condições foram atendidas e esconde o loader
 */
function checkAndHideLoader() {
   if (window.loaderState.authChecked &&
       window.loaderState.pageLoaded &&
       window.loaderState.requestsCompleted) {
      hideLoader();
   }
}

/**
 * Função para remover o loader
 * Esta função será chamada automaticamente quando todas as verificações forem concluídas
 */
function hideLoader() {
   const loader = document.getElementById("loader");
   if (loader) {
      loader.classList.add("d-none");
   } else {
      console.warn('⚠️ Elemento loader não encontrado');
   }
}

// Quando a página estiver totalmente carregada
window.addEventListener('load', function() {
   // Marca a página como carregada
   window.loaderState.pageLoaded = true;

   // Verifica se pode esconder o loader
   checkAndHideLoader();
});
